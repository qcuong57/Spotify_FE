// src/components/user/main/RelatedSongsSection.jsx

import React, { useEffect, useState, memo } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { getRelatedSongs } from "../../services/SongsService";
import { useTheme } from "../../context/themeContext";
import Section from "./main/Section";
import SongGrid from "./main/SongGrid";
import LoadingGrid from "./LoadingGrid";

const sectionVariants = {
  initial: { opacity: 0, y: 30 },
  animate: { opacity: 1, y: 0, transition: { duration: 0.6 } },
  exit: { opacity: 0, y: -20 },
};

const RelatedSongsSection = memo(
  ({ 
      songId, 
      songGenreName, // T√™n th·ªÉ lo·∫°i c·ªßa b√†i h√°t hi·ªán t·∫°i ƒë·ªÉ hi·ªÉn th·ªã ti√™u ƒë·ªÅ
      contextMenu, 
      setContextMenu, 
      handleCloseContextMenu 
    }) => {
    
    const { theme } = useTheme();
    const [relatedSongs, setRelatedSongs] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);

    // D√πng memoization cho c√°c props c·ªßa SongGrid
    const gridProps = { contextMenu, setContextMenu, handleCloseContextMenu };

    useEffect(() => {
      if (!songId) return;

      const fetchRelatedSongs = async () => {
        setIsLoading(true);
        setError(null);

        try {
          // L·∫•y 12 b√†i h√°t li√™n quan ƒë·ªÉ hi·ªÉn th·ªã
          const response = await getRelatedSongs(songId, 12);
          
          if (response?.data?.results?.length > 0) {
            setRelatedSongs(response.data.results);
          } else {
            setRelatedSongs([]);
          }

        } catch (err) {
          console.error("Error fetching related songs:", err);
          setError("Kh√¥ng th·ªÉ t·∫£i c√°c b√†i h√°t li√™n quan.");
        } finally {
          setIsLoading(false);
        }
      };

      fetchRelatedSongs();
    }, [songId]); // G·ªçi l·∫°i API khi ID b√†i h√°t thay ƒë·ªïi

    // X·ª≠ l√Ω khi kh√¥ng c√≥ b√†i h√°t li√™n quan
    if (!isLoading && relatedSongs.length === 0) return null;

    // H√†m onViewAll (c√≥ th·ªÉ ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn trang listSongs v·ªõi filter theo Genre)
    const handleViewAll = () => {
      // Logic ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn trang danh s√°ch b√†i h√°t c√πng th·ªÉ lo·∫°i
      console.log(`Maps to genre list: ${songGenreName}`);
      // N·∫øu b·∫°n mu·ªën hi·ªÉn th·ªã to√†n b·ªô 50 b√†i related (ch·ª© kh√¥ng ph·∫£i to√†n b·ªô genre)
      // b·∫°n s·∫Ω c·∫ßn m·ªôt h√†m load ƒë·∫ßy ƒë·ªß ·ªü ƒë√¢y
    };

    return (
      <AnimatePresence>
        {isLoading || relatedSongs.length > 0 ? (
          <motion.div
            variants={sectionVariants}
            initial="initial"
            animate="animate"
            exit="exit"
            className="mt-8"
          >
            <Section
              title={songGenreName 
                       ? `Kh√°m ph√° th√™m: ${songGenreName}` 
                       : "B√†i h√°t t∆∞∆°ng t·ª±"}
              emoji="üí°"
              onViewAll={handleViewAll}
              buttonText="Xem t·∫•t c·∫£"
              isLoading={isLoading}
              index={10} // Index cao v√¨ ƒë√¢y l√† secondary content
            >
              {isLoading ? (
                // Hi·ªÉn th·ªã khung t·∫£i 6 c·ªôt, 2 h√†ng
                <LoadingGrid count={12} cols={6} isHorizontal={false} />
              ) : (
                <SongGrid
                  songs={relatedSongs}
                  keyPrefix={`related-${songId}`}
                  {...gridProps}
                  isLoading={false}
                  index={10}
                />
              )}
            </Section>
          </motion.div>
        ) : null}
      </AnimatePresence>
    );
  }
);

export default RelatedSongsSection;